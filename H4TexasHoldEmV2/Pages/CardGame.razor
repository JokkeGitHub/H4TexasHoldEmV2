@page "/cardgame"

@using System.Net.WebSockets;
@using System.Runtime.CompilerServices;
@using System.Text;
@using System.Net.Http;
@using System.Net;
@using Microsoft.JSInterop;

<!-- Here we use the built-in dependency injection -->
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<div id="cardGameContainer">

    <div class="gameTable">
        <h3>Name: @playerName</h3>

        <button @onclick=ShowDialogue>Change Name</button>

        @if (dialogueVisible)
        {
            <div class="modal fade show" style="display: block;">
                <div class="modal-dialog">
                    <div class="modal-content">

                        <div class="modal-header">
                            <h5>Input your name:</h5>
                        </div>

                        <div class="modal-body">
                            <input @bind="playerName" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" @onclick=ReturnPlayerName>Submit Name</button>
                        </div>

                    </div>
                </div>
            </div>
        }

        <div class="cardsOnTable">

            <div class="cardInPlay" id="cardInPlay1">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div class="cardInPlay" id="cardInPlay2">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div class="cardInPlay" id="cardInPlay3">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div class="cardInPlay" id="cardInPlay4">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div class="cardInPlay" id="cardInPlay5">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div>
                @bananaPool
            </div>

        </div>
        <br />

        <div class="playerTable">

            <div class="cardInHand draggable" id="card1">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div class="cardInHand draggable" id="card2">
                @rank   <br />
                of      <br />
                @type   <br />
            </div>

            <div class="draggable">
                Bananas: @bananasPlayer
            </div>

        </div>
        <br />
    </div>


    <button class="btn btn-primary" @onclick="SendMailHttp">SendMailHttp</button>
    <button class="btn btn-primary" @onclick="SendMailHttps">SendMailHttps</button>
    <br />

    <h4>Screenshot</h4>
    <button type="button" class="btn btn-info" @onclick="TakeScreenshot">Take Screenshot</button>
    <div id="output" style="width: 50%">
    </div>

</div>

@code {
    string playerName = "Anon"; //Add local storage for this
    bool dialogueVisible = false;

    string imgPlaceholderCard = "/card_backside.png";
    string rank = "Ace";
    string type = "Spades";
    // Add rank and type for all 7 cards

    // Add a listview with some data, maybe the messages from game engine?? Or the player and their bananas
    //Add messages from game engine


    string imgPlaceHolderBanana = "";
    int bananasPlayer = 12;
    int bananaPool = 42;



    void ReturnPlayerName()
    {
        HideDialogue();
    }

    void ShowDialogue()
    {
        dialogueVisible = true;
    }

    void HideDialogue()
    {
        dialogueVisible = false;
    }

    private async Task TakeScreenshot()
    {
        await jsRuntime.InvokeVoidAsync("Takeshot");
    }

    // This task is to make sure that the html components exists before rendering the scripts
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("dragAndDrop", ".draggable");
    }


    #region API SENDEMAIL POST FIX IT
    // The content of the mail
    HttpContent httpContent = new StringContent("<h1>body<h1>");
    //192.168.43.126
    //0.0.0.0
    //localhost
    //https://192.168.43.126:7069/swagger/index.html
    //https://192.168.43.126:7069/swagger


    private async Task SendMailHttp()
    {
        // Don't like HTTP // This request has been blocked; the content must be served over HTTPS.
        await httpClient.PostAsync(@"http://192.168.43.126:51821/Email/sendemail", httpContent);
    }
    private async Task SendMailHttps()
    {
        //This seems to be an SSL issure// net::ERR_CERT_COMMON_NAME_INVALID
        // with SSL port 44321 // net::ERR_CONNECTION_REFUSED
        await httpClient.PostAsync(@"https://192.168.43.126:44321/Email/sendemail", httpContent);
    }
    #endregion
}